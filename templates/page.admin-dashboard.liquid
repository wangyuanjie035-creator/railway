{% comment %}
  客服后台管理界面
  只有通过身份验证的客服人员才能访问
{% endcomment %}

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>客服后台 - 订单管理系统</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: #f5f7fa;
      color: #333;
    }
    
    .admin-header {
      background: white;
      padding: 20px 30px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .admin-title {
      font-size: 24px;
      font-weight: 600;
      color: #333;
    }
    
    .admin-user {
      display: flex;
      align-items: center;
      gap: 15px;
    }
    
    .user-info {
      text-align: right;
    }
    
    .user-name {
      font-weight: 500;
      color: #333;
    }
    
    .user-role {
      font-size: 12px;
      color: #666;
    }
    
    .logout-btn {
      background: #e74c3c;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
    }
    
    .logout-btn:hover {
      background: #c0392b;
    }
    
    .admin-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 30px;
    }
    
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }
    
    .stat-card {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      text-align: center;
    }
    
    .stat-icon {
      font-size: 32px;
      margin-bottom: 10px;
    }
    
    .stat-number {
      font-size: 28px;
      font-weight: 600;
      color: #333;
      margin-bottom: 5px;
    }
    
    .stat-label {
      color: #666;
      font-size: 14px;
    }
    
    .main-content {
      display: grid;
      grid-template-columns: 1fr 300px;
      gap: 30px;
    }
    
    .orders-section {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .section-header {
      padding: 20px 25px;
      background: #f8f9fa;
      border-bottom: 1px solid #e9ecef;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .section-title {
      font-size: 18px;
      font-weight: 600;
      color: #333;
    }
    
    .refresh-btn {
      background: #667eea;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
    }
    
    .refresh-btn:hover {
      background: #5a6fd8;
    }
    
    .orders-list {
      max-height: 600px;
      overflow-y: auto;
    }
    
    .order-item {
      padding: 20px 25px;
      border-bottom: 1px solid #f0f0f0;
      cursor: pointer;
      transition: background 0.2s ease;
    }
    
    .order-item:hover {
      background: #f8f9fa;
    }
    
    .order-item:last-child {
      border-bottom: none;
    }
    
    .order-actions {
      display: flex;
      gap: 8px;
      margin-top: 15px;
      justify-content: flex-end;
    }
    
    .action-btn {
      width: 32px;
      height: 32px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s ease;
    }
    
    .action-btn.download {
      background: #e3f2fd;
      color: #1976d2;
    }
    
    .action-btn.download:hover {
      background: #bbdefb;
    }
    
    .action-btn.preview {
      background: #f3e5f5;
      color: #7b1fa2;
    }
    
    .action-btn.preview:hover {
      background: #e1bee7;
    }
    
    .action-btn.quote {
      background: #fff3e0;
      color: #f57c00;
    }
    
    .action-btn.quote:hover {
      background: #ffe0b2;
    }
    
    .action-btn.delete {
      background: #ffebee;
      color: #d32f2f;
    }
    
    .action-btn.delete:hover {
      background: #ffcdd2;
    }
    
    .action-btn.guide {
      background: #e8f5e8;
      color: #2e7d32;
    }
    .action-btn.guide:hover {
      background: #c8e6c9;
    }
    
    .order-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }
    
    .order-id {
      font-weight: 600;
      color: #333;
    }
    
    .order-status {
      padding: 4px 12px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 500;
    }
    
    .status-pending {
      background: #fff3cd;
      color: #856404;
    }
    
    .status-quoted {
      background: #d4edda;
      color: #155724;
    }
    
    .status-completed {
      background: #d1ecf1;
      color: #0c5460;
    }
    
    .order-info {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 15px;
      font-size: 14px;
      color: #666;
    }
    
    .order-customer {
      font-weight: 500;
      color: #333;
    }
    
    .order-time {
      text-align: right;
    }
    
    .sidebar {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }
    
    .quick-actions {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      padding: 20px;
    }
    
    .quick-actions h3 {
      margin-bottom: 15px;
      color: #333;
    }
    
    .action-btn {
      width: 100%;
      padding: 12px;
      margin-bottom: 10px;
      background: #f8f9fa;
      border: 1px solid #e9ecef;
      border-radius: 6px;
      cursor: pointer;
      text-align: left;
      transition: all 0.2s ease;
    }
    
    .action-btn:hover {
      background: #e9ecef;
      border-color: #667eea;
    }
    
    .action-btn:last-child {
      margin-bottom: 0;
    }
    
    .empty-state {
      text-align: center;
      padding: 40px;
      color: #666;
    }
    
    .empty-icon {
      font-size: 48px;
      margin-bottom: 15px;
    }
    
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      z-index: 1000;
    }
    
    .modal-content {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: white;
      border-radius: 12px;
      padding: 30px;
      max-width: 600px;
      width: 90%;
      max-height: 80vh;
      overflow-y: auto;
    }
    
    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .modal-title {
      font-size: 20px;
      font-weight: 600;
      color: #333;
    }
    
    .close-btn {
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      color: #666;
    }
    
    .close-btn:hover {
      color: #333;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
      color: #333;
    }
    
    .form-group input,
    .form-group textarea {
      width: 100%;
      padding: 12px;
      border: 1px solid #ddd;
      border-radius: 6px;
      font-size: 14px;
    }
    
    .form-group textarea {
      height: 100px;
      resize: vertical;
    }
    
    .modal-actions {
      display: flex;
      gap: 10px;
      justify-content: flex-end;
      margin-top: 20px;
    }
    
    .btn {
      padding: 10px 20px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 500;
    }
    
    .btn-primary {
      background: #667eea;
      color: white;
    }
    
    .btn-primary:hover {
      background: #5a6fd8;
    }
    
    .btn-secondary {
      background: #6c757d;
      color: white;
    }
    
    .btn-secondary:hover {
      background: #5a6268;
    }
  </style>
</head>
<body>
  <!-- 头部 -->
  <div class="admin-header">
    <div class="admin-title">📋 订单管理系统</div>
    <div class="admin-user">
      <div class="user-info">
        <div class="user-name" id="admin-name">客服管理员</div>
        <div class="user-role">客服人员</div>
      </div>
      <button class="logout-btn" onclick="logout()">退出登录</button>
    </div>
  </div>

  <!-- 主要内容 -->
  <div class="admin-container">
    <!-- 统计卡片 -->
    <div class="stats-grid">
      <div class="stat-card">
        <div class="stat-icon">📊</div>
        <div class="stat-number" id="total-orders">0</div>
        <div class="stat-label">总订单数</div>
      </div>
      <div class="stat-card">
        <div class="stat-icon">⏳</div>
        <div class="stat-number" id="pending-orders">0</div>
        <div class="stat-label">待报价</div>
      </div>
      <div class="stat-card">
        <div class="stat-icon">✅</div>
        <div class="stat-number" id="quoted-orders">0</div>
        <div class="stat-label">已报价</div>
      </div>
      <div class="stat-card">
        <div class="stat-icon">💰</div>
        <div class="stat-number" id="total-revenue">$0</div>
        <div class="stat-label">总报价金额</div>
      </div>
    </div>

    <!-- 主要内容区域 -->
    <div class="main-content">
      <!-- 订单列表 -->
      <div class="orders-section">
        <div class="section-header">
          <div class="section-title">订单列表</div>
          <button class="refresh-btn" id="refresh-btn">🔄 刷新</button>
        </div>
        <div class="orders-list" id="orders-list">
          <div class="empty-state">
            <div class="empty-icon">📋</div>
            <div>暂无订单数据</div>
          </div>
        </div>
      </div>

      <!-- 侧边栏 -->
      <div class="sidebar">
        <div class="quick-actions">
          <h3>快速操作</h3>
          <button class="action-btn" onclick="openQuoteModalFromQuickAction()">
            💰 添加报价
          </button>
          <button class="action-btn" onclick="openFileManager()">
            📁 文件管理
          </button>
          <button class="action-btn" onclick="openCustomerList()">
            👥 客户列表
          </button>
          <button class="action-btn" onclick="exportData()">
            📊 导出数据
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- 报价模态框 -->
  <div class="modal" id="quote-modal">
    <div class="modal-content">
      <div class="modal-header">
        <div class="modal-title">添加报价</div>
        <button class="close-btn" onclick="closeQuoteModal()">&times;</button>
      </div>
      <form id="quote-form">
        <div class="form-group">
          <label>订单ID</label>
          <input type="text" id="quote-order-id" readonly>
        </div>
        <div class="form-group">
          <label>客户邮箱</label>
          <input type="email" id="quote-email" readonly>
        </div>
        <div class="form-group">
          <label>发送邮箱 <span style="color: #e74c3c;">*</span></label>
          <input type="email" id="quote-sender-email" placeholder="请输入您的邮箱地址" required>
          <small style="color: #666; font-size: 12px;">用于发送报价邮件给客户</small>
        </div>
        <div class="form-group">
          <label>文件信息</label>
          <input type="text" id="quote-files" readonly>
        </div>
        <div class="form-group">
          <label>报价金额 ($)</label>
          <input type="number" id="quote-amount" step="0.01" required placeholder="请输入报价金额">
        </div>
        <div class="form-group">
          <label>报价备注</label>
          <textarea id="quote-note" placeholder="请输入报价备注（可选）..."></textarea>
        </div>
        <div class="modal-actions">
          <button type="button" class="btn btn-secondary" onclick="closeQuoteModal()">取消</button>
          <button type="submit" class="btn btn-primary">📧 立即发送报价</button>
        </div>
      </form>
    </div>
  </div>

  <!-- 加载登录管理系统 -->
  <script src="{{ 'login-manager.js' | asset_url }}" defer></script>
  
  <!-- 加载文件存储管理器 -->
  <script src="{{ 'file-storage.js' | asset_url }}" defer></script>
  
  <!-- 报价中心API客户端（App Proxy） -->
  <script src="{{ 'quote-api.js' | asset_url }}" defer></script>
  
  <script>
    // 接入你部署在 Vercel 的后端接口（纯后端对 Admin API）
    const QUOTES_API_BASE = 'https://shopify-13s4.vercel.app/api';
    // 检查登录状态
    function checkAuth() {
      if (!window.loginManager) {
        console.error('登录管理系统未加载');
        return false;
      }
      
      const hasAccess = window.loginManager.checkAndRedirect('admin');
      
      if (hasAccess) {
        // 更新用户信息
        const currentUser = window.loginManager.getCurrentUser();
        if (currentUser && currentUser.type === 'admin') {
          document.getElementById('admin-name').textContent = currentUser.data.name || '客服管理员';
        }
      }
      
      return hasAccess;
    }
    
    // 退出登录
    function logout() {
      if (window.loginManager) {
        window.loginManager.logout();
      }
      window.location.href = '/pages/admin-login';
    }
    
    // 获取订单数据
    async function fetchOrders() {
      // 1) 优先从 Vercel 后端读取 Metaobject: quote 列表
      try {
        console.log('开始获取订单列表...');
        const res = await fetch(`${QUOTES_API_BASE}/quotes`, { headers: { 'Accept': 'application/json' } });
        if (res.ok) {
          const data = await res.json();
          const records = Array.isArray(data) ? data : (data.records || []);
          console.log('获取到记录数量:', records.length);
          
          const orders = records
            .filter(r => {
              // 过滤掉已删除的记录
              // 暂时不过滤任何记录，显示所有订单
              return true;
            })
            .map(r => {
              const field = (key) => {
                const f = (r.fields || []).find(x => x.key === key);
                return f ? f.value : '';
              };
              const order = {
                id: r.handle || r.id,                    // 用 handle 作为唯一标识
                customer: field('author') || '未知客户',
                email: field('email') || '',
                files: field('text') || '—',
                status: field('status') || 'Pending',
                amount: field('price') || 0,
                time: new Date().toLocaleString('zh-CN'),
                properties: r
              };
              console.log('处理订单:', order.id, 'status:', order.status);
              return order;
            });
          
          console.log('最终订单数量:', orders.length);
          return orders.sort((a, b) => new Date(b.time) - new Date(a.time));
        }
      } catch (error) {
        console.warn('从 Vercel 后端获取失败，回退到购物车：', error);
      }
      // 2) 失败时降级读取本地购物车
      try {
        const response = await fetch('/cart.js');
        const cart = await response.json();
        const orders = [];
        cart.items.forEach(item => {
          if (item.properties && item.properties['Order Type'] === '3D Model Quote') {
            orders.push({
              id: item.properties._uuid || item.key,
              customer: item.properties['客户姓名'] || '未知客户',
              email: item.properties['客户邮箱'] || '',
              files: item.properties['零件名称'] || '未知文件',
              status: item.properties['Quote Status'] || 'Pending',
              amount: item.properties['Quoted Price'] || 0,
              time: item.properties._uuid ? new Date(parseInt(item.properties._uuid.split('-')[0])).toLocaleString('zh-CN') : new Date().toLocaleString('zh-CN'),
              cartItemKey: item.key,
              properties: item.properties
            });
          }
        });
        return orders.sort((a, b) => new Date(b.time) - new Date(a.time));
      } catch (error) {
        console.error('获取订单失败:', error);
        return [];
      }
    }
    
    // 渲染订单列表
    function renderOrders(orders) {
      // 保存订单数据到全局变量，供其他函数使用
      window.currentOrders = orders;
      
      const ordersList = document.getElementById('orders-list');
      
      if (orders.length === 0) {
        ordersList.innerHTML = `
          <div class="empty-state">
            <div class="empty-icon">📋</div>
            <div>暂无订单数据</div>
          </div>
        `;
        return;
      }
      
      ordersList.innerHTML = orders.map(order => `
        <div class="order-item">
          <div class="order-header">
            <div class="order-id">订单 #${order.id.substring(0, 8)}</div>
            <div class="order-status status-${order.status.toLowerCase()}">
              ${getStatusText(order.status)}
            </div>
          </div>
          <div class="order-info">
            <div>
              <div class="order-customer">${order.customer}</div>
              <div>${order.email}</div>
            </div>
            <div>
              <div>${order.files}</div>
              <div class="order-time">${order.time}</div>
            </div>
          </div>
          <div class="order-actions">
            <button class="action-btn download" onclick="downloadOrderFile('${order.id}')" title="下载文件">
              ⬇️
            </button>
            <button class="action-btn preview" onclick="previewOrderFile('${order.id}')" title="预览文件">
              👁️
            </button>
            <button class="action-btn quote" onclick="openQuoteModal('${order.id}', '${order.customer}', '${order.email}', '${order.files}')" title="添加报价">
              💰
            </button>
            <button class="action-btn guide" onclick="showCustomerGuide('${order.id}', '${order.email}')" title="客户操作指南">
              📋
            </button>
            <button class="action-btn delete" onclick="deleteQuote('${order.id}')" title="删除">
              🗑️
            </button>
          </div>
        </div>
      `).join('');
    }
    
    // 获取状态文本
    function getStatusText(status) {
      const statusMap = {
        'Pending': '待报价',
        'Quoted': '已报价',
        'Completed': '已完成'
      };
      return statusMap[status] || status;
    }
    
    // 更新统计信息
    function updateStats(orders) {
      const totalOrders = orders.length;
      const pendingOrders = orders.filter(o => o.status === 'Pending').length;
      const quotedOrders = orders.filter(o => o.status === 'Quoted').length;
      const totalRevenue = orders
        .filter(o => o.amount > 0)
        .reduce((sum, o) => sum + parseFloat(o.amount), 0);
      
      document.getElementById('total-orders').textContent = totalOrders;
      document.getElementById('pending-orders').textContent = pendingOrders;
      document.getElementById('quoted-orders').textContent = quotedOrders;
      document.getElementById('total-revenue').textContent = `$${totalRevenue.toFixed(2)}`;
    }
    
    // 刷新订单
    async function refreshOrders() {
      const orders = await fetchOrders();
      renderOrders(orders);
      updateStats(orders);
    }

    // 添加刷新按钮事件监听器
    document.addEventListener('DOMContentLoaded', function() {
      const refreshBtn = document.getElementById('refresh-btn');
      if (refreshBtn) {
        refreshBtn.addEventListener('click', refreshOrders);
      }
    });
    
    // 选择订单
    function selectOrder(orderId) {
      // 这里可以添加订单详情查看功能
      console.log('选择订单:', orderId);
    }
    
    // 从快速操作打开报价模态框
    function openQuoteModalFromQuickAction() {
      const currentOrders = window.currentOrders || [];
      if (currentOrders.length === 0) {
        alert('暂无订单数据');
        return;
      }
      
      // 选择第一个待报价的订单，或者第一个订单
      const pendingOrder = currentOrders.find(o => o.status === 'Pending') || currentOrders[0];
      if (pendingOrder) {
        openQuoteModal(pendingOrder.id);
      } else {
        alert('没有可报价的订单');
      }
    }

    // 打开报价模态框
    function openQuoteModal(orderId, customer, email, files) {
      // 如果参数为空，从当前订单列表获取数据
      if (!orderId) {
        alert('请先选择要报价的订单');
        return;
      }
      
      // 从当前订单列表获取详细信息
      const currentOrders = window.currentOrders || [];
      const order = currentOrders.find(o => o.id === orderId);
      
      if (order) {
        // 从 order 对象中提取邮箱地址
        let extractedEmail = order.email || email || '';
        
        // 如果 order.email 为空，尝试从 order.customer 或 order.properties 中提取
        if (!extractedEmail && order.properties && order.properties.fields) {
          const authorField = order.properties.fields.find(f => f.key === 'author');
          if (authorField && authorField.value && authorField.value.includes('@')) {
            const emailMatch = authorField.value.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/);
            if (emailMatch) {
              extractedEmail = emailMatch[1];
              console.log('📧 在 openQuoteModal 中提取到邮箱:', extractedEmail);
            }
          }
        }
        
        document.getElementById('quote-order-id').value = order.id;
        document.getElementById('quote-email').value = extractedEmail;
        document.getElementById('quote-files').value = order.files || files || '';
        document.getElementById('quote-amount').value = '';
        document.getElementById('quote-note').value = '';
      } else {
        // 使用传入的参数
        document.getElementById('quote-order-id').value = orderId;
        document.getElementById('quote-email').value = email || '';
        document.getElementById('quote-files').value = files || '';
        document.getElementById('quote-amount').value = '';
        document.getElementById('quote-note').value = '';
      }
      
      document.getElementById('quote-modal').style.display = 'block';
    }
    
    // 关闭报价模态框
    function closeQuoteModal() {
      document.getElementById('quote-modal').style.display = 'none';
    }
    
    // 显示客户操作指南
    function showCustomerGuide(orderId, email) {
      const guideContent = `
        <div style="padding: 20px; max-width: 500px;">
          <h3 style="margin-top: 0; color: #333;">客户操作指南</h3>
          
          <div style="background: #f8f9fa; padding: 16px; border-radius: 8px; margin-bottom: 16px;">
            <h4 style="margin: 0 0 12px 0; color: #333;">订单信息</h4>
            <div style="font-size: 14px; line-height: 1.5;">
              <div><strong>订单号：</strong>${orderId}</div>
              <div><strong>客户邮箱：</strong>${email}</div>
            </div>
          </div>
          
          <div style="background: #fff3e0; padding: 16px; border-radius: 8px; margin-bottom: 16px;">
            <h4 style="margin: 0 0 12px 0; color: #333;">客户需要执行的操作</h4>
            <div style="font-size: 14px; line-height: 1.6;">
              <div style="margin-bottom: 8px;"><strong>1. 通知客户</strong></div>
              <div style="margin-left: 16px; margin-bottom: 12px;">
                请通过以下方式联系客户：<br>
                📧 邮箱：${email}<br>
                📱 电话或其他联系方式
              </div>
              
              <div style="margin-bottom: 8px;"><strong>2. 告知客户操作步骤</strong></div>
              <div style="margin-left: 16px; margin-bottom: 12px;">
                • 刷新购物车页面<br>
                • 查看报价状态是否更新<br>
                • 如果未更新，重新提交询价<br>
                • 或直接联系客服确认
              </div>
              
              <div style="margin-bottom: 8px;"><strong>3. 系统限制说明</strong></div>
              <div style="margin-left: 16px; color: #666; font-size: 13px;">
                由于客户和客服使用不同的浏览器会话，购物车状态无法自动同步更新。
              </div>
            </div>
          </div>
          
          <div style="background: #e3f2fd; padding: 12px; border-radius: 6px; border-left: 4px solid #1976d2;">
            <p style="margin: 0; color: #1976d2; font-size: 14px;">
              <strong>建议：</strong>完成报价后，主动联系客户确认并指导操作。
            </p>
          </div>
        </div>
      `;
      
      const modal = document.createElement('div');
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
      `;
      
      modal.innerHTML = `
        <div style="
          background: white;
          border-radius: 12px;
          padding: 0;
          max-width: 600px;
          width: 90%;
          max-height: 80vh;
          overflow-y: auto;
          position: relative;
        ">
          <div style="
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
          ">
            <h3 style="margin: 0; color: #333;">客户操作指南</h3>
            <button onclick="this.closest('.guide-modal').remove()" style="
              background: none;
              border: none;
              font-size: 24px;
              cursor: pointer;
              color: #666;
            ">&times;</button>
          </div>
          <div>${guideContent}</div>
        </div>
      `;
      
      modal.className = 'guide-modal';
      document.body.appendChild(modal);
      
      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          modal.remove();
        }
      });
    }
    
    // 打开文件管理
    function openFileManager() {
      window.open('/pages/admin-file-manager', '_blank');
    }
    
    // 打开客户列表
    function openCustomerList() {
      alert('客户列表功能开发中...');
    }
    
    // 导出数据
    function exportData() {
      alert('数据导出功能开发中...');
    }
    
    // 下载订单文件
    async function downloadOrderFile(orderId) {
      try {
        console.log('开始下载文件，订单ID:', orderId);
        
        // 从当前订单列表获取文件信息
        const currentOrders = await fetchOrders();
        const order = currentOrders.find(o => o.id === orderId);
        
        if (!order || !order.properties) {
          alert('未找到订单信息');
          return;
        }
        
        // 从 Metaobject 获取文件信息
        const field = (key) => {
          const f = (order.properties.fields || []).find(x => x.key === key);
          return f ? f.value : '';
        };
        
        const invoiceUrl = field('invoice_url');
        const fileName = field('text') || '未知文件';
        
        console.log('文件信息:', { invoiceUrl, fileName });
        console.log('完整订单信息:', order);
        
        // 注意：由于 Metaobject 字段限制，文件数据可能无法直接存储
        // 优先尝试从购物车获取文件数据
        
        if (invoiceUrl && (invoiceUrl.startsWith('http://') || invoiceUrl.startsWith('https://')) && !invoiceUrl.includes('placeholder.com')) {
          // 有效的 URL，直接下载
          console.log('使用 HTTP URL 下载:', invoiceUrl);
          const link = document.createElement('a');
          link.href = invoiceUrl;
          link.download = fileName;
          link.target = '_blank';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        } else if (invoiceUrl && invoiceUrl.includes('/api/download-file?id=')) {
          // Vercel 文件下载链接，直接打开
          console.log('使用 Vercel 文件下载链接:', invoiceUrl);
          window.open(invoiceUrl, '_blank');
        } else if (invoiceUrl === 'data:stored') {
          // 文件已存储但无法直接下载
          console.log('文件已存储但无法直接下载');
          alert(`文件已存储但无法直接下载\n\n原因：由于技术限制，文件数据无法在客服端直接访问。\n\n解决方案：\n1. 联系客户重新上传文件\n2. 或请客户通过邮件发送文件\n3. 或指导客户在购物车页面下载文件后发送给您\n\n订单信息：\n- 文件名：${fileName}\n- 订单ID：${orderId}`);
        } else if (invoiceUrl === 'data:upload_failed' || invoiceUrl === 'data:processing_error' || invoiceUrl === 'data:invalid_url') {
          // 文件上传失败或处理错误
          console.log('文件上传失败或处理错误:', invoiceUrl);
          const statusText = {
            'data:upload_failed': '文件上传失败',
            'data:processing_error': '文件处理异常',
            'data:invalid_url': '文件URL无效'
          }[invoiceUrl] || '文件状态异常';
          alert(`文件下载不可用\n\n原因：${statusText}。\n\n解决方案：\n1. 联系客户重新上传文件\n2. 或请客户通过邮件发送文件\n3. 或指导客户在购物车页面下载文件后发送给您\n\n订单信息：\n- 文件名：${fileName}\n- 订单ID：${orderId}\n- 状态：${statusText}`);
        } else if (invoiceUrl === 'data:unavailable' || invoiceUrl.includes('placeholder.com')) {
          // 文件数据不可用或为占位符
          console.log('文件数据不可用或为占位符:', invoiceUrl);
          alert(`文件下载不可用\n\n原因：文件数据未正确存储或为占位符链接。\n\n解决方案：\n1. 联系客户重新上传文件\n2. 或请客户通过邮件发送文件\n3. 或指导客户在购物车页面下载文件后发送给您\n\n订单信息：\n- 文件名：${fileName}\n- 订单ID：${orderId}\n- 当前链接：${invoiceUrl}`);
        } else {
          // 其他情况，显示提示信息
          console.log('文件数据不可用，显示提示信息:', invoiceUrl);
          alert(`文件下载不可用\n\n原因：客服和客户使用不同的浏览器会话，无法直接访问客户购物车中的文件。\n\n解决方案：\n1. 联系客户重新上传文件\n2. 或请客户通过邮件发送文件\n3. 或指导客户在购物车页面下载文件后发送给您\n\n订单信息：\n- 文件名：${fileName}\n- 订单ID：${orderId}\n- 当前链接：${invoiceUrl}`);
        }
      } catch (error) {
        console.error('下载文件失败:', error);
        alert('下载文件失败: ' + error.message);
      }
    }
    
    // 预览订单文件
    async function previewOrderFile(orderId) {
      try {
        // 从当前订单列表获取文件信息
        const currentOrders = await fetchOrders();
        const order = currentOrders.find(o => o.id === orderId);
        
        if (!order || !order.properties) {
          alert('未找到订单信息');
          return;
        }
        
        // 从 Metaobject 获取文件信息
        const field = (key) => {
          const f = (order.properties.fields || []).find(x => x.key === key);
          return f ? f.value : '';
        };
        
        const fileName = field('text') || '未知文件';
        const customer = field('author') || '未知客户';
        
        // 从 author 字段提取邮箱地址
        let email = '';
        const authorField = field('author') || '';
        console.log('📧 原始 author 字段:', authorField);
        
        if (authorField.includes('@')) {
          // 提取邮箱地址（通常在括号前或字段开始）
          const emailMatch = authorField.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/);
          if (emailMatch) {
            email = emailMatch[1];
            console.log('✅ 提取到邮箱地址:', email);
          } else {
            console.warn('⚠️ 未找到邮箱地址格式');
          }
        } else {
          console.warn('⚠️ author 字段中没有 @ 符号');
        }
        
        const status = field('status') || 'Pending';
        const price = field('price') || '';
        const uploadTime = order.time || new Date().toLocaleString('zh-CN');
        
        // 从 author 字段解析参数信息（重用已声明的 authorField 变量）
        let detailedParams = {
          quantity: '1',
          unit: '件',
          material: '未指定',
          finish: '未指定',
          precision: '未指定',
          tolerance: '未指定',
          roughness: '未指定',
          hasThread: '否',
          hasAssembly: '否',
          scale: '100',
          note: '无'
        };
        
        // 尝试从 author 字段解析参数
        if (authorField.includes('|')) {
          try {
            const parts = authorField.split('|');
            if (parts.length > 1) {
              const paramPart = parts[1].trim();
              const params = paramPart.split(' | ');
              
              params.forEach(param => {
                if (param.includes('数量:')) {
                  const match = param.match(/数量:(\d+)(\w+)/);
                  if (match) {
                    detailedParams.quantity = match[1];
                    detailedParams.unit = match[2];
                  }
                } else if (param.includes('材料:')) {
                  detailedParams.material = param.replace('材料:', '');
                } else if (param.includes('精度:')) {
                  detailedParams.precision = param.replace('精度:', '');
                } else if (param.includes('公差:')) {
                  detailedParams.tolerance = param.replace('公差:', '');
                } else if (param.includes('粗糙度:')) {
                  detailedParams.roughness = param.replace('粗糙度:', '');
                } else if (param.includes('螺纹:')) {
                  detailedParams.hasThread = param.replace('螺纹:', '');
                } else if (param.includes('装配:')) {
                  detailedParams.hasAssembly = param.replace('装配:', '');
                } else if (param.includes('缩放:')) {
                  detailedParams.scale = param.replace('缩放:', '').replace('%', '');
                } else if (param.includes('备注:')) {
                  detailedParams.note = param.replace('备注:', '');
                }
              });
            }
          } catch (parseError) {
            console.warn('解析参数失败:', parseError);
          }
        }
        
        // 如果解析失败，尝试从购物车获取（兼容旧数据）
        if (detailedParams.material === '未指定') {
          try {
            const response = await fetch('/cart.js');
            const cart = await response.json();
            const cartItem = cart.items.find(item => 
              item.properties && item.properties._uuid === orderId
            );
            if (cartItem && cartItem.properties) {
              Object.assign(detailedParams, cartItem.properties);
            }
          } catch (cartError) {
            console.warn('从购物车获取参数失败:', cartError);
          }
        }
        
        // 显示文件预览信息
        const previewContent = `
          <div style="padding: 20px;">
            <div style="text-align: center; margin-bottom: 20px;">
              <div style="font-size: 48px; margin-bottom: 16px;">📁</div>
              <h3 style="margin: 0 0 8px 0;">${fileName}</h3>
              <p style="margin: 0; color: #666;">3D模型文件</p>
            </div>
            
            <div style="background: #f8f9fa; padding: 16px; border-radius: 8px; margin-bottom: 16px;">
              <h4 style="margin: 0 0 12px 0; color: #333;">订单信息</h4>
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; font-size: 14px;">
                <div><strong>订单ID:</strong> ${orderId}</div>
                <div><strong>客户:</strong> ${customer}</div>
                <div><strong>邮箱:</strong> ${email}</div>
                <div><strong>状态:</strong> ${getStatusText(status)}</div>
                <div><strong>上传时间:</strong> ${uploadTime}</div>
                ${price ? `<div><strong>报价:</strong> $${price}</div>` : ''}
              </div>
            </div>
            
            <div style="background: #fff3e0; padding: 16px; border-radius: 8px; margin-bottom: 16px;">
              <h4 style="margin: 0 0 12px 0; color: #333;">加工参数</h4>
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; font-size: 14px;">
                <div><strong>数量:</strong> ${detailedParams.quantity || detailedParams['数量'] || 1}</div>
                <div><strong>单位:</strong> ${detailedParams.unit || detailedParams['单位'] || '件'}</div>
                <div><strong>材料:</strong> ${detailedParams.material || detailedParams['材料'] || '未指定'}</div>
                <div><strong>表面处理:</strong> ${detailedParams.finish || detailedParams['颜色与表面'] || '未指定'}</div>
                <div><strong>精度等级:</strong> ${detailedParams.precision || detailedParams['精度等级'] || '未指定'}</div>
                <div><strong>公差标准:</strong> ${detailedParams.tolerance || detailedParams['公差标准'] || '未指定'}</div>
                <div><strong>表面粗糙度:</strong> ${detailedParams.roughness || detailedParams['表面粗糙度'] || '未指定'}</div>
                <div><strong>是否有螺纹:</strong> ${detailedParams.hasThread || detailedParams['是否有螺纹'] || '否'}</div>
                <div><strong>装配标记:</strong> ${detailedParams.hasAssembly || detailedParams['是否有装配标记'] || '否'}</div>
                <div><strong>缩放比例:</strong> ${detailedParams.scale || detailedParams['缩放比例'] || 100}%</div>
                <div><strong>备注:</strong> ${detailedParams.note || detailedParams['备注'] || '无'}</div>
              </div>
            </div>
            
            <div style="background: #e3f2fd; padding: 12px; border-radius: 6px; border-left: 4px solid #1976d2;">
              <p style="margin: 0; color: #1976d2; font-size: 14px;">
                <strong>注意：</strong>文件信息来自报价系统。点击下载按钮可以下载实际文件。
              </p>
            </div>
          </div>
        `;
        
        // 创建预览模态框
        const modal = document.createElement('div');
        modal.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0,0,0,0.5);
          z-index: 1000;
          display: flex;
          align-items: center;
          justify-content: center;
        `;
        
        modal.innerHTML = `
          <div style="
            background: white;
            border-radius: 12px;
            padding: 0;
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            position: relative;
          ">
            <div style="
              display: flex;
              justify-content: space-between;
              align-items: center;
              padding: 20px;
              border-bottom: 1px solid #e9ecef;
            ">
              <h3 style="margin: 0; color: #333;">文件预览</h3>
              <button onclick="this.closest('.modal').remove()" style="
                background: none;
                border: none;
                font-size: 24px;
                cursor: pointer;
                color: #666;
              ">&times;</button>
            </div>
            <div>${previewContent}</div>
          </div>
        `;
        
        modal.className = 'modal';
        document.body.appendChild(modal);
        
        // 点击外部关闭
        modal.addEventListener('click', function(e) {
          if (e.target === modal) {
            modal.remove();
          }
        });
        
      } catch (error) {
        console.error('预览文件失败:', error);
        alert('预览文件失败: ' + error.message);
      }
    }
    
    // 处理报价表单提交
    document.getElementById('quote-form').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const orderId = document.getElementById('quote-order-id').value;
      const customerEmail = document.getElementById('quote-email').value;
      const senderEmail = document.getElementById('quote-sender-email').value;
      const files = document.getElementById('quote-files').value;
      const amount = document.getElementById('quote-amount').value;
      const note = document.getElementById('quote-note').value;
      
      if (!amount || parseFloat(amount) <= 0) {
        alert('请输入有效的报价金额');
        return;
      }
      
      if (!senderEmail || !senderEmail.includes('@')) {
        alert('请输入有效的发送邮箱地址');
        document.getElementById('quote-sender-email').focus();
        return;
      }
      
      if (!customerEmail || !customerEmail.includes('@')) {
        alert('客户邮箱地址无效，无法发送邮件');
        return;
      }
      
      try {
        // 显示提交中状态
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.textContent;
        submitBtn.disabled = true;
        submitBtn.textContent = '提交中...';
        
        // 1) 更新 Vercel 后端（Metaobject：quote）
        let updateSuccess = false;
        try {
          const res = await fetch(`${QUOTES_API_BASE}/quotes?handle=${encodeURIComponent(orderId)}`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: JSON.stringify({ 
              status: 'Quoted', 
              price: String(amount)
            })
          });
          if (res.ok) {
            updateSuccess = true;
            console.log('后端更新成功');
          } else {
            console.warn('后端更新失败:', await res.text());
          }
        } catch (err) {
          console.warn('后端更新异常:', err);
        }

        // 2) 跳过购物车更新（客服和客户使用不同浏览器）
        let cartUpdateSuccess = false;
        console.log('跳过购物车更新 - 客服和客户使用不同浏览器会话');
        
        // 3) 发送报价邮件给客户
        let emailSuccess = false;
        if (customerEmail) {
          try {
            console.log('开始发送邮件:', { from: senderEmail, to: customerEmail });
            await sendQuoteEmail(orderId, customerEmail, senderEmail, files, amount, note);
            emailSuccess = true;
            console.log('✅ 邮件发送成功');
          } catch (err) {
            console.warn('❌ 邮件发送失败:', err);
          }
        } else {
          console.warn('⚠️ 没有客户邮箱地址，跳过邮件发送');
        }
        
        // 恢复按钮状态
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
        
        // 显示结果
        let message = '报价已提交！\n\n';
        if (updateSuccess) message += '✅ 后端数据库已更新\n';
        if (cartUpdateSuccess) message += '✅ 购物车状态已更新\n';
        if (emailSuccess) message += '✅ 邮件内容已生成\n';
        
        message += '\n📧 邮件发送说明：\n';
        message += '邮件内容已生成，请按照以下步骤发送给客户：\n\n';
        message += '1. 点击"📤 打开邮件客户端"按钮\n';
        message += '2. 在打开的邮件客户端中点击"发送"\n';
        message += '3. 或点击"📋 复制邮件内容"手动发送\n\n';
        
        if (!cartUpdateSuccess) {
          message += '⚠️ 重要提示：\n';
          message += '由于客服和客户使用不同的浏览器会话，\n';
          message += '无法直接更新客户购物车状态。请告知客户：\n\n';
          message += '1. 刷新购物车页面查看报价\n';
          message += '2. 或重新提交询价获取最新状态\n';
          message += '3. 查看邮件中的报价详情\n';
          message += '4. 如需文件，请联系客户重新上传\n';
        }
        
        alert(message);
        closeQuoteModal();
        refreshOrders();
        
      } catch (error) {
        console.error('提交报价失败:', error);
        alert('提交报价失败: ' + error.message);
        
        // 恢复按钮状态
        const submitBtn = this.querySelector('button[type="submit"]');
        submitBtn.disabled = false;
        submitBtn.textContent = '发送报价邮件';
      }
    });
    
    // 发送报价邮件
    async function sendQuoteEmail(orderId, customerEmail, senderEmail, files, amount, note) {
      try {
        console.log('📧 调用邮件API，参数:', { orderId, customerEmail, senderEmail, files, amount, note });
        
        // 调用邮件 API 生成邮件内容
        const response = await fetch(`${QUOTES_API_BASE}/send-email`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            orderId: orderId,
            email: customerEmail,  // 保持向后兼容
            customerEmail: customerEmail,
            senderEmail: senderEmail,
            files: files,
            amount: amount,
            note: note
          })
        });

        console.log('📧 邮件API响应状态:', response.status);

        if (response.ok) {
          const result = await response.json();
          console.log('✅ 邮件内容生成成功:', result);
          
          // 显示邮件内容对话框，让客服选择发送方式
          showEmailDialog(result);
          
          return result;
        } else {
          const errorText = await response.text();
          console.error('❌ 邮件API响应错误:', response.status, errorText);
          throw new Error(`邮件内容生成失败: ${response.status}`);
        }
      } catch (error) {
        console.warn('⚠️ 邮件 API 调用失败，使用备用方案:', error);
        
        // 备用方案：使用发送邮箱的 mailto
        const subject = `报价通知 - 订单 #${orderId ? orderId.substring(0, 8) : 'N/A'}`;
        const body = `
尊敬的客户，

您好！您的定制加工询价已完成报价，详情如下：

📋 订单信息：
- 订单号：${orderId || 'N/A'}
- 文件：${files || 'N/A'}
- 报价金额：$${amount}
${note ? `- 备注：${note}` : ''}

感谢您选择我们的服务！

此致
定制化加工服务团队
        `.trim();
        
        const mailtoUrl = `mailto:${customerEmail}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
        console.log('📧 备用方案 - 打开邮件客户端:', mailtoUrl);
        window.open(mailtoUrl, '_blank');
        
        console.log('✅ 已打开邮件客户端（备用方案）');
      }
    }

    // 显示邮件内容对话框
    function showEmailDialog(emailResult) {
      const modal = document.createElement('div');
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.8);
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
      `;

      modal.innerHTML = `
        <div style="
          background: white;
          border-radius: 12px;
          padding: 30px;
          max-width: 600px;
          max-height: 80vh;
          overflow-y: auto;
          box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        ">
          <h2 style="margin: 0 0 20px 0; color: #333; text-align: center;">📧 报价邮件</h2>
          
          <div style="margin-bottom: 20px;">
            <strong>收件人：</strong> ${emailResult.email.to}
          </div>
          
          <div style="margin-bottom: 20px;">
            <strong>主题：</strong> ${emailResult.email.subject}
          </div>
          
          <div style="margin-bottom: 20px;">
            <strong>邮件内容：</strong>
            <textarea readonly style="
              width: 100%;
              height: 200px;
              border: 1px solid #ddd;
              border-radius: 6px;
              padding: 12px;
              font-family: monospace;
              font-size: 12px;
              resize: vertical;
            ">${emailResult.email.textBody}</textarea>
          </div>
          
          <div style="text-align: center;">
            <button id="open-mail-btn" style="
              background: #007bff;
              color: white;
              border: none;
              padding: 12px 24px;
              border-radius: 6px;
              margin: 0 10px;
              cursor: pointer;
              font-size: 14px;
            ">📤 打开邮件客户端</button>
            
            <button id="copy-email-btn" style="
              background: #28a745;
              color: white;
              border: none;
              padding: 12px 24px;
              border-radius: 6px;
              margin: 0 10px;
              cursor: pointer;
              font-size: 14px;
            ">📋 复制邮件内容</button>
            
            <button onclick="this.closest('.email-modal').remove()" style="
              background: #6c757d;
              color: white;
              border: none;
              padding: 12px 24px;
              border-radius: 6px;
              margin: 0 10px;
              cursor: pointer;
              font-size: 14px;
            ">关闭</button>
          </div>
        </div>
      `;

      modal.className = 'email-modal';
      document.body.appendChild(modal);

      // 添加邮件客户端按钮事件监听器
      const mailBtn = modal.querySelector('#open-mail-btn');
      mailBtn.addEventListener('click', () => {
        openMailClient(emailResult.mailto, emailResult.email);
      });

      // 添加复制按钮事件监听器
      const copyBtn = modal.querySelector('#copy-email-btn');
      copyBtn.addEventListener('click', () => {
        copyEmailToClipboard(emailResult.email.textBody);
      });

      // 点击背景关闭
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.remove();
        }
      });
    }

    // 打开邮件客户端
    function openMailClient(mailtoUrl, emailData = null) {
      try {
        console.log('📧 尝试打开邮件客户端:', mailtoUrl);
        
        // 尝试打开 mailto 链接
        const mailWindow = window.open(mailtoUrl, '_blank');
        
        // 检查是否成功打开
        setTimeout(() => {
          if (!mailWindow || mailWindow.closed || mailWindow.location.href === 'about:blank') {
            console.warn('⚠️ mailto 链接可能未成功打开邮件客户端');
            
            const emailInfo = emailData ? 
              `📧 邮件信息：
收件人：${emailData.to}
主题：${emailData.subject}` : 
              '';
              
            alert(`⚠️ 无法自动打开邮件客户端。

🔧 解决方案：
1. 点击"📋 复制邮件内容"按钮
2. 手动打开您的邮件客户端（Gmail、Outlook等）
3. 创建新邮件，粘贴内容并发送

${emailInfo}

或者您可以尝试配置浏览器的默认邮件客户端。`);
          } else {
            console.log('✅ 邮件客户端已打开');
            alert('✅ 邮件客户端已打开！\n\n请在打开的邮件客户端中点击"发送"按钮。');
          }
        }, 1000);
        
      } catch (error) {
        console.error('❌ 打开邮件客户端失败:', error);
        alert('❌ 无法打开邮件客户端。\n\n请使用"复制邮件内容"功能，然后手动发送邮件。');
      }
    }

    // 复制邮件内容到剪贴板
    function copyEmailToClipboard(text) {
      try {
        navigator.clipboard.writeText(text).then(() => {
          alert('✅ 邮件内容已复制到剪贴板！\n\n请打开您的邮件客户端，粘贴内容并发送给客户。');
        }).catch(err => {
          console.error('复制失败:', err);
          // 备用方案：创建临时文本区域
          const textArea = document.createElement('textarea');
          textArea.value = text;
          document.body.appendChild(textArea);
          textArea.select();
          document.execCommand('copy');
          document.body.removeChild(textArea);
          alert('✅ 邮件内容已复制到剪贴板！\n\n请打开您的邮件客户端，粘贴内容并发送给客户。');
        });
      } catch (error) {
        console.error('❌ 复制邮件内容失败:', error);
        alert('❌ 复制失败，请手动选择并复制邮件内容。');
      }
    }
    
    // 删除后端报价记录
    async function deleteQuote(handle) {
      if (!confirm('确定要删除该报价记录吗？')) return;
      try {
        console.log('开始删除记录:', handle);
        
        // 使用 DELETE 方法（后端已支持部分匹配）
        const res = await fetch(`${QUOTES_API_BASE}/quotes?handle=${encodeURIComponent(handle)}`, {
          method: 'DELETE',
          headers: { 
            'Accept': 'application/json' 
          }
        });
        
        console.log('DELETE 响应状态:', res.status);
        
        if (!res.ok) {
          const t = await res.text();
          console.error('DELETE 失败:', res.status, t);
          
          // 尝试解析错误信息
          let errorMsg = t;
          try {
            const errorObj = JSON.parse(t);
            errorMsg = errorObj.error || errorObj.message || t;
            
            // 如果是验证失败，显示更详细的信息
            if (errorObj.expected && errorObj.actual) {
              errorMsg = `状态更新验证失败：期望 ${errorObj.expected}，实际 ${errorObj.actual}`;
            }
          } catch (e) {
            // 保持原始错误信息
          }
          
          alert('删除失败：' + errorMsg);
          return;
        }
        
        const result = await res.text();
        console.log('删除成功:', result);
        
        // 强制刷新订单列表
        console.log('开始刷新订单列表...');
        await refreshOrders();
        console.log('订单列表刷新完成');
        
        alert('删除成功！');
      } catch (e) {
        console.error('删除异常:', e);
        alert('删除失败：' + (e?.message || e));
      }
    }

    // 更新订单状态
    async function updateOrderStatus(orderId, status, amount) {
      try {
        // 从购物车获取订单项
        const response = await fetch('/cart.js');
        const cart = await response.json();
        
        // 尝试多种匹配方式
        let item = cart.items.find(item => 
          item.properties && item.properties._uuid === orderId
        );
        
        // 如果没找到，尝试其他可能的匹配方式
        if (!item) {
          // 尝试匹配订单ID的部分
          const orderIdParts = orderId.split('-');
          const shortId = orderIdParts[orderIdParts.length - 1]; // 获取最后一部分
          
          item = cart.items.find(item => 
            item.properties && (
              item.properties['Order Type'] === '3D Model Quote' &&
              (item.properties['零件名称'] === orderId || 
               item.properties['文件名称'] === orderId ||
               item.properties._uuid === orderId ||
               item.properties._uuid && item.properties._uuid.includes(shortId) ||
               item.key === orderId)
            )
          );
        }
        
        // 如果还是没找到，尝试匹配文件名
        if (!item && cart.items.length > 0) {
          item = cart.items.find(item => 
            item.properties && 
            item.properties['Order Type'] === '3D Model Quote'
          );
        }
        
        if (!item) {
          console.warn('购物车中未找到对应订单，可能客户已清空购物车');
          console.log('查找的订单ID:', orderId);
          console.log('购物车中的项目:', cart.items.map(i => ({
            key: i.key,
            properties: i.properties
          })));
          
          // 显示跨浏览器提示
          console.log('注意：客服和客户使用不同的浏览器会话，无法直接更新客户购物车');
          return; // 不抛出错误，因为这是正常情况
        }
        
        console.log('找到购物车项目:', item);
        
        // 更新订单状态
        const updateResponse = await fetch('/cart/update.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            updates: {
              [item.key]: {
                properties: {
                  ...item.properties,
                  'Quote Status': status,
                  'Quoted Price': amount,
                  'Quote Completed': 'true',
                  'Quote Date': new Date().toISOString()
                }
              }
            }
          })
        });
        
        if (!updateResponse.ok) {
          const errorText = await updateResponse.text();
          throw new Error(`更新订单状态失败: ${errorText}`);
        }
        
        console.log('购物车状态更新成功');
        
      } catch (error) {
        console.error('更新订单状态失败:', error);
        throw error;
      }
    }

    // 页面初始化
    document.addEventListener('DOMContentLoaded', function() {
      if (checkAuth()) {
        refreshOrders();
      }
    });
  </script>
</body>
</html>
